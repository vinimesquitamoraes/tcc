head  = require ("Lua2NCL/head")
connectorBase = require ("Lua2NCL/connectorBase")
descriptor  = require ("Lua2NCL/descriptor")
area = require ("Lua2NCL/area")
link  = require ("Lua2NCL/link")
media = require ("Lua2NCL/media")
port = require ("Lua2NCL/port")
property  = require ("Lua2NCL/property")
region = require ("Lua2NCL/region")
rule = require ("Lua2NCL/rule")
transition = require ("Lua2NCL/transition")

local Lua2NCL = {}

ids = {} -- tabela para armazenar todos os ids
headElem = {}  -- contem as tabelas que referem aos elementos contidos no head do NCL	
body = {} -- contem as tabelas que referem aos elementos contidos no body do NCL. media, port..
links = {} --  contem as tabelas apenas dos links


-- Deixa a primeira letra maiscula
function firstToUpper(str)
    return (str:gsub("^%l", string.upper))
end


function writeRule()
	-- body
	local aux = false
	for i,t in pairs(headElem) do
		if t:getType() == "rule" then 
			aux = true
		end
	end

	if (aux) then
		local text = ""
		text = text.."\t\t<ruleBase>\n"
		for i,t in pairs(headElem) do
			if t:getType() == "rule" then 
				string = t:print() 
				text = text.."\t\t\t"..string
			end
		end
		text = text.."\t\t</ruleBase>\n\n"
		return text
	else
		return ""
	end
end

function writeRegion()
	-- body
	local aux = false
	for i,t in pairs(headElem) do
		if t:getType() == "region" then 
			aux = true
		end
	end

	if (aux) then
		local text = ""
		text = text.."\t\t<regionBase>\n"
		for i,t in pairs(headElem) do
			if t:getType() == "region" then 
				string = t:print() 
				text = text.."\t\t\t"..string
			end
		end
		text = text.."\t\t</regionBase>\n\n"
		return text
	else
		return ""
	end
end

function writeTransition()
	-- body
	local aux = false
	for i,t in pairs(headElem) do
		if t:getType() == "transition" then 
			aux = true
		end
	end

	if (aux) then
		local text = ""
		text = text.."\t\t<transitionBase>\n"
		for i,t in pairs(headElem) do
			if t:getType() == "transition" then  
				string = t:print() 
				text = text.."\t\t\t"..string
			end
		end
		text = text.."\t\t</transitionBase>\n\n"
		return text
	else
		return ""
	end
end

function writeDescriptor()
	-- body
	local aux = false
	for i,t in pairs(headElem) do
		if t:getType() == "descriptor" then 
			aux = true
		end
	end

	if (aux) then
		local text = ""
		text = text.."\t\t<descriptorBase>\n"
		for i,t in pairs(headElem) do
			if t:getType() == "descriptor" then  
				string = t:print() 
				text = text.."\t\t\t"..string
			end
		end
		text = text.."\t\t</descriptorBase>\n\n"
		return text
	else
		return ""
	end
end

function writeConnector()
	-- body
	local aux = false
	for i,t in pairs(headElem) do
		if t:getType() == "connectorBase" then 
			aux = true
		end
	end

	if (aux) then
		local text = ""
		text = text.."\t\t<connectorBase>\n"
		for i,t in pairs(headElem) do
			if t:getType() == "connectorBase" then  
				string = t:print() 
				text = text.."\t\t\t"..string
			end
		end
		text = text.."\t\t</connectorBase>\n\n"
		return text
	else
		return ""
	end
end


function writeLinks( )
	-- body
	local text = ""
	for i,t in pairs(links) do
		string = t:print()
		text = text.."\t\t"..string.."\n"
	end
	return text
end


-- Converter as tabelas luas em tags NCL
function Lua2NCL:Translate()

	--criar o arquivo .ncl com o mesmo nome do documento lua
	print("\nParsing document ".. arg[0] .." to NCL\n\n")
	--print("NUMERO DE IDS", #ids)



	local name = arg[0]
	name = string.sub(name,1,(string.find(name,".lua")-1))
	local f=io.open(name..".ncl","w")
	io.output(f)

	-- texto para ser escrito no documento .ncl
	local fulltext = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!--Generated by Lua2NCL v.1.0-->\n<ncl id=\"".. name.."\" xmlns=\"http://www.ncl.org.br/NCL3.0/EDTVProfile\">\n"
	

	--  imprimir elementos 
	if (#headElem > 0) then
		fulltext = fulltext .."\t<head>\n"
		fulltext = fulltext..writeRule()
		fulltext = fulltext..writeTransition()
		fulltext = fulltext..writeRegion()
		fulltext = fulltext..writeDescriptor()
		fulltext = fulltext..writeConnector()
		fulltext = fulltext .."\t</head>\n"
	end
	

	fulltext = fulltext .."\t<body>\n"

	-- imprime os elementos do body: media, port
	if (#body > 0) then
		for i=1,#body,1 do
			fulltext = fulltext.."\t\t"..body[i]:print().."\n"
		end
	end

	fulltext = fulltext ..writeLinks()

	fulltext = fulltext .."\t</body>\n"
	fulltext = fulltext .."</ncl>"
	io.write(fulltext)
	io.close(f)
	print("**** DONE!! ****\n\n")
	print("Generated NCL file is:", name..".ncl\n\n")
	
	print("Analysing NCL file with NCL Validator\n")
	os.execute("java -jar ncl-validator-1.4.20.jar -nl pt_BR "..name..".ncl")
	print("Lua2NCL v.1.0\n")
end

return Lua2NCL

